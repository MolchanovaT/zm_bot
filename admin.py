import os
import pandas as pd
import asyncio
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.utils import secure_filename

import config
from data.load_csv import load_data_from_csv  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞ CSV

UPLOAD_FOLDER = "uploads"
ALLOWED_EXTENSIONS = {"csv"}

app = Flask(__name__)

BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
DATABASE_PATH = os.path.join(BASE_DIR, "data", "database.sqlite")  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

app.config["SQLALCHEMY_DATABASE_URI"] = f"sqlite:///{DATABASE_PATH}"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
app.config["SECRET_KEY"] = config.SECRET_KEY  # –ë–µ—Ä–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ config

db = SQLAlchemy(app)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É uploads –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
class Dilers(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    inn = db.Column(db.String(50), unique=True, nullable=False)
    allowed = db.Column(db.Boolean, default=True)


class LPU(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    inn = db.Column(db.String(50), unique=True, nullable=False)
    allowed = db.Column(db.Boolean, default=True)


login_manager = LoginManager(app)
login_manager.login_view = "login"  # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞


# üë§ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
class User(UserMixin):
    def __init__(self, id):
        self.id = id


@login_manager.user_loader
def load_user(user_id):
    return User(user_id)


# üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        if username == "admin" and password == config.PASSWORD:
            login_user(User(1))
            flash("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", "success")
            return redirect(url_for("index"))
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!", "danger")
    return render_template("login.html")


# üîπ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!", "info")
    return redirect(url_for("login"))


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
@app.route('/')
@login_required
def index():
    dilers = Dilers.query.all()
    lpus = LPU.query.all()
    return render_template('index.html', dilers=dilers, lpus=lpus, user=current_user)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–†–∞–∑—Ä–µ—à–µ–Ω–æ/–ó–∞–ø—Ä–µ—â–µ–Ω–æ"
@app.route('/toggle/<string:table>/<int:item_id>')
@login_required
def toggle_status(table, item_id):
    Model = Dilers if table == "Dilers" else LPU
    record = Model.query.get(item_id)
    if record:
        record.allowed = not record.allowed  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        db.session.commit()
    return redirect(url_for('index'))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@app.route("/add", methods=["GET", "POST"])
@login_required
def add_record():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if request.method == "POST":
        name = request.form["name"]
        inn = request.form["inn"]
        table = request.form["table"]

        Model = Dilers if table == "Dilers" else LPU
        new_record = Model(name=name, inn=inn)

        db.session.add(new_record)
        db.session.commit()

        flash(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {table}!", "success")
        return redirect(url_for("index"))

    return render_template("add.html")


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@app.route('/delete/<string:table>/<int:item_id>')
@login_required
def delete_record(table, item_id):
    Model = Dilers if table == "Dilers" else LPU
    record = Model.query.get(item_id)
    if record:
        db.session.delete(record)
        db.session.commit()
    return redirect(url_for('index'))


@app.route("/edit/<string:table>/<int:item_id>", methods=["GET", "POST"])
@login_required
def edit_record(table, item_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ò–ù–ù, —Å—Ç–∞—Ç—É—Å)"""
    Model = Dilers if table == "Dilers" else LPU
    record = Model.query.get(item_id)

    if not record:
        flash("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", "danger")
        return redirect(url_for("index"))

    if request.method == "POST":
        record.name = request.form["name"]
        record.inn = request.form["inn"]
        record.allowed = "allowed" in request.form  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å (—á–µ–∫–±–æ–∫—Å)

        db.session.commit()
        flash("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", "success")
        return redirect(url_for("index"))

    return render_template("edit.html", record=record, table=table)


# –ó–∞–≥—Ä—É–∑–∫–∞ CSV
@app.route("/upload", methods=["POST"])
@login_required
def upload_file():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ CSV"""
    if "file" not in request.files:
        flash("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!", "danger")
        return redirect(url_for("index"))

    file = request.files["file"]
    table = request.form["table"]

    if file.filename == "":
        flash("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!", "danger")
        return redirect(url_for("index"))

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)

        os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

        file.save(file_path)

        try:
            asyncio.run(load_data_from_csv(file_path, table))
            flash(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {table}!", "success")
        except Exception as e:
            flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", "danger")

    return redirect(url_for("index"))


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)
